@page "/"
@using TorrentWEB.Core.Parse
@using TorrentWEB.Core.Sites
@using AutoMapper
@using TorrentWEB.Components.BigComponents
@using TorrentWEB.Models
@inject Blazored.SessionStorage.ISessionStorageService _storageService
@inject HtmlLoader _loader
@inject IMapper _mapper
@inject UsualParse _parse


@inject IJSRuntime _runtime

@if (!_load)
{
    <Film Items="@_itemPage"/>
    <Paginator Update="async () => {  await GetItems(); await UpdateFilm(); }"  CurrentPage="_currentPage" MaxElements="countPages"/>
}
else
{
    <img src="https://i.pinimg.com/originals/f7/57/de/f757de576d93cdc33eff53536e7acc8f.gif"/>
}

@code
{
    List<Cart> _itemPage = null;
    int countPages = 0;
    TorrLafa _kinozavl = new TorrLafa();
    int _currentPage = 0;
    bool _load = false;
    UsualSetting _map;

    protected override async Task OnInitializedAsync()
    {
        _load = true;
        await GetItems();

        _map = _mapper.Map<UsualSetting>(_kinozavl);

        if (_itemPage == null && countPages == 0 && _currentPage == 0)
        {
            await SetItems();
            await UpdateFilm();
        }
        else
        {
            await UpdateFilm();
        }
        
        
        StateHasChanged();
        _load = false;
    }

    

    private async Task SetItems()
    {
        await _storageService.SetItemAsync("CurrentPage", 0);
    }

    private async Task GetItems()
    {
        _itemPage = await _storageService.GetItemAsync<List<Cart>>("ItemPage");
        countPages = await _storageService.GetItemAsync<int>("CountPage");
        _currentPage = await _storageService.GetItemAsync<int>("CurrentPage");
    }
    
     async Task UpdateFilm()
     {
         try
         {
             _currentPage = await _storageService.GetItemAsync<int>("CurrentPage");
             var html = _loader.GetHtmlByPage(_map,_currentPage).Result;

             if (html != null)
             {
                 _itemPage = _parse.GetObjects(html, _map);
                 countPages = _parse.GetCountPages(html, _map);
                 await _storageService.SetItemAsync("ItemPage", _itemPage);
                 await _storageService.SetItemAsync("CountPage", countPages);
             }
         }
         catch (Exception e)
         {
             await _runtime.InvokeAsync<string>("console.log('swer')");
         }
         StateHasChanged();
        
    }
    

}